// Media Query Breakpoints
@mixin bp($bp) {
	@media only screen and (min-width: $bp) {
		@content;
	}
}

@mixin bp-tiny ($minOrMax: "min") {
	@media screen and (#{$minOrMax}-width: $bp-tiny) {
		@content;
	}
}

@mixin bp-sml ($minOrMax: "min") {
	@media screen and (#{$minOrMax}-width: $bp-sml) {
		@content;
	}
}

@mixin bp-mdm ($minOrMax: "min") {
	@media screen and (#{$minOrMax}-width: $bp-mdm) {
		@content;
	}
}

@mixin bp-lrg ($minOrMax: "min") {
	@media screen and (#{$minOrMax}-width: $bp-lrg) {
		@content;
	}
}

// transitions
@mixin transition($effect: all, $time: 300ms, $easing: ease-in-out) {
	transition: $effect $time $easing;
}

// background colors
@mixin background($color, $hover: "null") {
	
	background-color: $color;
	
	@if $hover != "null" {
		
		@include transition(background-color);
		
		&:hover {
			background-color: $hover;
		}
	}
}

// Center
@mixin center($justify: center, $orientation: row, $wrap: nowrap) {
	display: flex;
	flex-flow: $orientation $wrap;
	justify-content: $justify;
	align-items: center;
}

// Css Grid Mixins

@mixin grid($type: "grid", $limit: 1200px, $pad: .75em) {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
	// grid-auto-rows: minmax(50px, auto);
	grid-auto-rows: auto;
    margin: 0 auto;
    @if $type == "grid--padded" {
        grid-gap: $pad;
    } @else if $type == "grid--limited" {
        max-width: $limit;
    } @else if $type == "grid--limited-padded" {
        grid-gap: $pad;
        max-width: $limit;
    }
}


