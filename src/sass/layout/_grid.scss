// the grid class and its variants can work as individual rows or if columns are configured
// in such a way one grid can represent multiple rows

.grid { @include grid;}
@each $size, $break in $break-points {
    .grid--#{$size} {
        @include bp($break) {
            @include grid; 
        }
    }
}
.grid--padded { @include grid("grid--padded");}
@each $size, $break in $break-points {
    .grid--padded--#{$size} {
        @include bp($break) {
            @include grid("grid--padded"); 
        }
    }
}
.grid--limited { @include grid("grid--limited");}
@each $size, $break in $break-points {
    .grid--limited--#{$size} {
        @include bp($break) {
            @include grid("grid--limited"); 
        }
    }
}
.grid--limited-padded { @include grid("grid--limited-padded");}
@each $size, $break in $break-points {
    .grid--limited-padded--#{$size} {
        @include bp($break) {
            @include grid("grid--limited-padded");
        }
    }
}

.grid--nested { @include grid("grid--nested");}

// simply 'column' would be a much more concise class name prefix
.grid__column {
    
    // Syntax: class="grid__column--3"
    // ** NOT used enough to be justified move to alter**
    $column: 1;
    @while $column <= $columns {
        &--#{$column} {
            grid-column: span $column;
            @each $size, $bp in $break-points {
                &--#{$size} {
                    @include bp($bp) {
                        grid-column: span $column;
                    }
                }
            }
        }
        $column: $column + 1;
    }

    // This is a non-responsive option for creating grid columns
    // However by adding multiple classes the exact sizes can be applied at each
    // breakpoint making it responsive exactly to your needs
    // Syntax: class="grid__column--base--12 grid__column--tiny--6 grid__column--mdm--3"
    // @each $size, $bp in $grid-sizes {
    //     &--#{$size} {
    //         $column: 1;
    //         @while $column <= $columns {
    //             &--#{$column} {
    //                 @if $size != "base" {
    //                     @include bp($bp) {
    //                         grid-column: span $column;
    //                     }
    //                 } @else {
    //                     grid-column: span $column;
    //                 }
    //             }
    //             $column: $column + 1;
    //         }
    //     }
    // }
}

.grid__image {
    display: block;
    width: 100%;
}